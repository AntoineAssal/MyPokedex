[{"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\index.js":"1","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\App.js":"2","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\reportWebVitals.js":"3","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\components\\Pokedex.js":"4","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\components\\Pokemon.js":"5","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\constants.js":"6"},{"size":666,"mtime":1609364385786,"results":"7","hashOfConfig":"8"},{"size":529,"mtime":1609365406098,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4263,"mtime":1609460001772,"results":"11","hashOfConfig":"8"},{"size":3211,"mtime":1609457157431,"results":"12","hashOfConfig":"8"},{"size":212,"mtime":1609438974776,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1kw5oas",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\index.js",[],["29","30"],"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\App.js",[],"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\reportWebVitals.js",[],"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\components\\Pokedex.js",[],"C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\components\\Pokemon.js",["31","32","33","34","35","36","37","38"],"import React, { useEffect, useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport { CircularProgress, Link, Typography, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { toFirstCharUpperCase, padLeadingZeros } from \"../constants\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst Pokemon = (props) => {\r\n\r\n    const { history, match } = props;\r\n    const { params } = match;\r\n    const { pokemonID } = props.match.params;\r\n    const [pokemon, setPokemon] = useState(undefined); \r\n    //1.pokemon= undefined, that means we're about to get the info --> return loading progress\r\n    //2.pokemon= good data, that means we've gotten the info  --> return the actual info\r\n    //3.pokmeon = bad data or false (if it doesn't exist in the API) --> return pokemon not found\r\n\r\n    useEffect(() => {\r\n        axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon/${pokemonID}/`)\r\n        .then(function (response) {\r\n            const { data } = response;\r\n            setPokemon(data);\r\n        })\r\n        .catch(function (error) {\r\n            setPokemon(false);\r\n        });\r\n    },[pokemonID]);\r\n\r\n\r\n\r\n    const pokemonJSXGenerator = () => {\r\n        const { name, id, species, height, weight, types, sprites, abilities } = pokemon;\r\n        const originalImageURL = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n        const { front_default } = sprites;\r\n        return (\r\n            <>\r\n                <Typography variant=\"h1\" >\r\n                    {`#${id}.`} {toFirstCharUpperCase(name)}\r\n                    <img src={front_default} />\r\n                </Typography>\r\n                <img style={{ width: \"300px\", height: \"300px\" }} src={originalImageURL}></img>\r\n                <Typography variant=\"h3\" >Pokemon Description: </Typography>\r\n                <Typography>\r\n                    {\"Species: \"}\r\n                    <Link href={species.url}> {species.name} </Link>\r\n                </Typography>\r\n                <Typography> Height: {height} </Typography>\r\n                <Typography> Weight: {weight} grams </Typography>\r\n                <Typography> Types: </Typography>\r\n                {types.map((typeInfo) => {\r\n                    const { type } = typeInfo;\r\n                    const { name } = type;\r\n                    return <Typography key={name}> {`${name}`}</Typography>;\r\n                })}\r\n            </>\r\n        )\r\n    };\r\n    //1.pokemon= undefined, that means we're about to get the info --> return loading progress\r\n    //2.pokemon= good data, that means we've gotten the info  --> return the actual info\r\n    //3.pokmeon = bad data or false (if it doesn't exist in the API) --> return pokemon not found\r\n    return (<>\r\n        {pokemon === undefined && <CircularProgress/>}\r\n        {pokemon !== undefined && pokemon && pokemonJSXGenerator()}\r\n        {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n        {pokemon !== undefined && (\r\n            <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n                Go Back to Pokedex\r\n            </Button>\r\n        )}\r\n      </>);\r\n};\r\n\r\nexport default Pokemon;","C:\\Users\\tonya\\Documents\\React\\pokedex\\src\\constants.js",[],["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":8,"nodeType":"47","messageId":"48","endLine":2,"endColumn":12},{"ruleId":"45","severity":1,"message":"49","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"50","line":5,"column":10,"nodeType":"47","messageId":"48","endLine":5,"endColumn":20},{"ruleId":"45","severity":1,"message":"51","line":6,"column":32,"nodeType":"47","messageId":"48","endLine":6,"endColumn":47},{"ruleId":"45","severity":1,"message":"52","line":13,"column":13,"nodeType":"47","messageId":"48","endLine":13,"endColumn":19},{"ruleId":"45","severity":1,"message":"53","line":35,"column":68,"nodeType":"47","messageId":"48","endLine":35,"endColumn":77},{"ruleId":"54","severity":1,"message":"55","line":42,"column":21,"nodeType":"56","endLine":42,"endColumn":48},{"ruleId":"54","severity":1,"message":"55","line":44,"column":17,"nodeType":"56","endLine":44,"endColumn":89},{"ruleId":"41","replacedBy":"57"},{"ruleId":"43","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'makeStyles' is defined but never used.","'padLeadingZeros' is defined but never used.","'params' is assigned a value but never used.","'abilities' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["59"],["60"],"no-global-assign","no-unsafe-negation"]